From c7a76d551cae0a731f7500bb607b5054221d6f8a Mon Sep 17 00:00:00 2001
From: Vineet Patil <vbpatil9980@gmail.com>
Date: Mon, 11 May 2020 21:21:45 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 25 ++++++++++++++++++++++---
 src/Graph.tsx | 11 ++++++++---
 2 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..ffa6b88 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
     };
   }
 
@@ -29,7 +31,10 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if ( this.state.showGraph )
+    {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
@@ -39,7 +44,21 @@ class App extends Component<{}, IState> {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+
+      let count = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds : ServerRespond[]) => {
+          this.setState({
+            data: serverResponds,
+            showGraph: true
+          });
+        });
+        count++;
+        if(count > 1000)
+        {
+          clearInterval(interval);
+        }
+      }, 100);
     });
   }
 
@@ -71,4 +90,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..cd189e4 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock" : "distinct count", "top_ask_price" : "avg", "top_bid_price" : "avg", "timestamp" : "distinct count"}');
     }
   }
 
@@ -70,4 +75,4 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.26.2.windows.1

